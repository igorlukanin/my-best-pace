<% extend 'layouts/default.ect' %>

<!--<div class="header">-->
    <!--<div class="header_logo">-->
        <!--<span class="header_logo_title">Pace Craze</span> of-->
        <!--<span class="header_logo_name"><%= @athlete.full_name %></span>-->
    <!--</div>-->
    <!--<div class="header_tabs">-->
        <!--<div class="header_tabs_tab">All distances</div>-->
        <!--<% for @record in @records: %>-->
        <!--<div class="header_tabs_tab"><%= @record.label %><span class="header_tabs_tab_note"><%= @record.time %></span></div>-->
        <!--<% end %>-->
    <!--</div>-->
<!--</div>-->

<svg id="pace_chart" class="pace_chart"></svg>

<script>
    var formatPace = function(pace) {
        var minutes = Math.floor(pace),
            seconds = Math.floor(60 * (pace - minutes));

        return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
    };

    var t = function(x, y) {
        return 'translate(' + x + ',' + y + ')';
    };

    var g = function(chart, x, y) {
        return chart.append('g').attr('transform', t(x, y));
    };

    var createYAxis = function(options, chart, placement) {
        var x = 'right' == placement ? options.width - options.yAxisAreaWidth : 0,
            group = g(chart, x, options.awardAreaHeight),
            range = options.data.range.pace;

        for (var pace = range.min; pace <= range.max; pace += range.step) {
            group.append('text')
                    .attr('x', options.yAxisAreaWidth / 2)
                    .attr('y', options.y(pace) + options.textHeight / 2)
                    .attr('text-anchor', 'middle')
                    .text(formatPace(pace));
        }
    };

    var createYHairlines = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight),
            range = options.data.range.pace;

        for (var pace = range.min; pace <= range.max; pace += range.step) {
            group.append('rect')
                    .attr('x', 0)
                    .attr('y', options.y(pace))
                    .attr('width', options.width)
                    .attr('height', options.thickness)
                    .attr('fill', '#eee');
        }
    };

    var createYAxes = function(options, chart) {
        createYAxis(options, chart, 'right');
    };

    var createXMonths = function(options, chart) {
        var group = g(chart, 0, options.height - 0.75 * options.xAxisAreaHeight),
            range = options.data.range.timestamp;

        var date = new Date(1000 * range.min);
        date.setMonth(date.getMonth() + 1);

        while (date.getTime() / 1000 <= range.max) {
            var months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],
                month = date.getMonth();

            group.append('text')
                    .attr('x', options.x(date.getTime() / 1000))
                    .attr('y', options.textHeight / 2)
                    .attr('text-anchor', 'middle')
                    .text(months[month]);

            date.setMonth(date.getMonth() + 1);
        }
    };

    var createXYears = function(options, chart) {
        var group = g(chart, 0, options.height - 0.4 * options.xAxisAreaHeight),
            range = options.data.range.timestamp;

        var date = new Date(1000 * range.min);

        while (date.getTime() / 1000 <= range.max) {
            if (date.getMonth() == 0) {
                var year = date.getFullYear();

                group.append('text')
                        .attr('x', options.x(date.getTime() / 1000))
                        .attr('y', options.textHeight / 2)
                        .attr('text-anchor', 'middle')
                        .text(year);
            }

            date.setMonth(date.getMonth() + 1);
        }
    };

    var createXHairlines = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight),
            range = options.data.range.timestamp;

        for (var timestamp = range.min; timestamp <= range.max; timestamp += range.step) {
            var date = new Date(1000 * timestamp);

            if (date.getUTCMonth() == 0) {
                var year = date.getUTCFullYear();

                group.append('rect')
                        .attr('x', options.x(timestamp))
                        .attr('y', 0)
                        .attr('width', options.thickness)
                        .attr('height', options.yAxisAreaHeight)
                        .attr('fill', '#eee');
            }
        }
    };

    var createXAxis = function(options, chart) {
        createXMonths(options, chart);
        createXYears(options, chart);
    };

    var showXHightlight = function(options, node) {
        d3.select(node).attr('class', 'highlight_area');
    };

    var hideXHightlight = function(options, node) {
        d3.select(node).attr('class', 'highlight_area highlight_area__hidden');
    };

    var createAwards = function(options, chart, period) {
        var group = g(chart, options.yAxisAreaWidth, 0);

        group.append('image')
                .attr('x', options.x(period.timestamp) - 0.5 * options.awardSize)
                .attr('y', options.awardAreaHeight - 0.5 * options.awardSize)
                .attr('width', options.awardSize)
                .attr('height', options.awardSize)
                .attr('fill', '#ddd')
                .attr('xlink:href', '/static/svg/icon-35-medal.svg');
    };

    var getVolumeOffset = function(options, period) {
        return options.y(period.avgPace) - options.awardAreaHeight * period.distance / options.data.range.distance.max;
    };

    var createHighlightArea = function(options, chart, period) {
        var group = chart.append('g')
                .attr('class', 'highlight_area highlight_area__hidden')
                .on('mouseover', function() { showXHightlight(options, this); })
                .on("mouseout", function() { hideXHightlight(options, this); });

        group.append('rect')
                .attr('x', options.x(period.timestamp - 0.5 * options.data.range.timestamp.step))
                .attr('y', 0)
                .attr('width', options.x(period.timestamp + 0.5 * options.data.range.timestamp.step) - options.x(period.timestamp - 0.5 * options.data.range.timestamp.step))
                .attr('height', options.height);

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', getVolumeOffset(options, period) - 1.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .text(period.distance);

        // avg

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (1.5 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_label')
                .text('avg');

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (3.25 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_value')
                .text(formatPace(period.avgPace));

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (4.5 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_label')
                .text('m / km');

        // min

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 1.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_label')
                .text('min');

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 3.25 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_value')
                .text(formatPace(period.minPace));

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 4.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_label')
                .text('m / km');
    };

    var createVolumeArea = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var area = d3.svg.area()
                .x(function(period) { return options.x(period.timestamp); })
                .y0(function(period) { return options.y(period.avgPace); })
                .y1(function(period) { return getVolumeOffset(options, period); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', area(period))
                    .attr('class', 'volume_area');
        });
    };

    var createAvgPaceCurve = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var line = d3.svg.line()
                .x(function(period) { return options.x(period.timestamp); })
                .y(function(period) { return options.y(period.avgPace); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', line(period))
                    .attr('class', 'avg_pace')
                    .attr('fill', 'none');
        });
    };

    var createMinPaceCurve = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var line = d3.svg.line()
                .x(function(period) { return options.x(period.timestamp); })
                .y(function(period) { return options.y(period.minPace); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', line(period))
                    .attr('class', 'min_pace')
                    .attr('fill', 'none');
        });
    };

    var createHighlightAreas = function(options, chart) {
        var group = g(chart, 0, 0),
            first = true;

        options.data.periods.forEach(function(period) {
            period.forEach(function(month) {
                if (first) {
                    first = false;
                    return;
                }

                createHighlightArea(options, group, month);

                if (month.awards) {
                    createAwards(options, chart, month);
                }
            });
        });
    };

    var createCurve = function(options, chart) {
        createVolumeArea(options, chart);
        createAvgPaceCurve(options, chart);
        createMinPaceCurve(options, chart);
        createHighlightAreas(options, chart);
    };

    var options = {
        width: document.getElementById('pace_chart').offsetWidth,
        height: 500,
        xAxisAreaHeight: 75,
        yAxisAreaWidth: 75,
        awardAreaHeight: 100,
        thickness: 1,
        textHeight: 13,
        awardSize: 30,
        avgMonthSeconds: 60 * 60 * 24 * 30.5
    };

    options.xAxisAreaWidth = options.width - 2 * options.yAxisAreaWidth;
    options.yAxisAreaHeight = options.height - options.awardAreaHeight - options.xAxisAreaHeight;

    options.data = <%- JSON.stringify(@pace); %>;

    var chart = d3
            .select('.pace_chart')
            .attr('width', options.width)
            .attr('height', options.height);

    options.x = d3.scale.linear()
            .range([ 0, options.width ])
            .domain([
                options.data.range.timestamp.min,
                options.data.range.timestamp.max + options.avgMonthSeconds / 2
            ]);

    options.y = d3.scale.linear()
            .range([ options.height - options.awardAreaHeight - options.xAxisAreaHeight, 0 ])
            .domain([ options.data.range.pace.min, options.data.range.pace.max ]);

    createYHairlines(options, chart);
    createXHairlines(options, chart);
    createCurve(options, chart);
    createYAxes(options, chart);
    createXAxis(options, chart);
</script>