<% extend 'layouts/default.ect' %>

<div class="header header__profile">
    <div class="header_logo">
        <span class="header_logo_title">Pace Craze</span> of
        <span class="header_logo_name"><%= @athlete.full_name %></span>
    </div>
</div>

<div class="tabs">
    <% for @record in @records: %>
    <div class="tabs_tab">
        <div class="tabs_tab_label"><%= @record.label %></div>
        <div class="tabs_tab_note">
            <% if @record.id == 'all': %>&nbsp;<% end %>
            <% if @record.id != 'all': %><%= @record.time %><% end %>
        </div>
        <svg id="pace_chart_<%= @record.id %>" class="pace_chart_<%= @record.id %> pace_chart__simple tabs_tab_chart" onclick="switchChart('<%= @record.id %>');"></svg>
    </div>
    <% end %>
    <div class="tabs_tab">
        <div class="tabs_tab_label">Hours</div>
        <div class="tabs_tab_note">every day</div>
        <svg id="hours_chart" class="hours_chart tabs_tab_chart tabs_tab_chart__big"></svg>
    </div>
    <div class="tabs_tab">
        <div class="tabs_tab_label">Days</div>
        <div class="tabs_tab_note">every week</div>
        <svg id="days_chart" class="days_chart tabs_tab_chart tabs_tab_chart__big"></svg>
    </div>
</div>

<svg id="pace_chart" class="pace_chart"></svg>

<script>
    var formatPace = function(pace) {
        var minutes = Math.floor(pace),
            seconds = Math.floor(60 * (pace - minutes));

        return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
    };

    var t = function(x, y) {
        return 'translate(' + x + ',' + y + ')';
    };

    var g = function(chart, x, y) {
        return chart.append('g').attr('transform', t(x, y));
    };

    var createYAxis = function(options, chart, placement) {
        var x = 'right' == placement ? options.width - options.yAxisAreaWidth : 0,
            group = g(chart, x, options.awardAreaHeight),
            range = options.data.range.pace;

        for (var pace = range.min; pace <= range.max; pace += range.step) {
            group.append('text')
                    .attr('x', options.yAxisAreaWidth / 2)
                    .attr('y', options.y(pace) + options.textHeight / 2)
                    .attr('text-anchor', 'middle')
                    .text(formatPace(pace))
                    .style('opacity', 0)
                    .transition()
                    .style('opacity', 1);
        }
    };

    var createYHairlines = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight),
            range = options.data.range.pace;

        for (var pace = range.min; pace <= range.max; pace += range.step) {
            group.append('rect')
                    .attr('x', 0)
                    .attr('y', options.y(pace))
                    .attr('width', options.width)
                    .attr('class', 'y_hairline');
        }
    };

    var createYAxes = function(options, chart) {
        createYAxis(options, chart, 'right');
    };

    var createXMonths = function(options, chart) {
        var group = g(chart, 0, options.height - 0.75 * options.xAxisAreaHeight),
            range = options.data.range.timestamp;

        var date = new Date(1000 * range.min);
        date.setMonth(date.getMonth() + 1);

        while (date.getTime() / 1000 <= range.max) {
            var months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],
                month = date.getMonth();

            group.append('text')
                    .attr('x', options.x(date.getTime() / 1000))
                    .attr('y', options.textHeight / 2)
                    .attr('text-anchor', 'middle')
                    .text(months[month]);

            date.setMonth(date.getMonth() + 1);
        }
    };

    var createXYears = function(options, chart) {
        var group = g(chart, 0, options.height - 0.4 * options.xAxisAreaHeight),
            range = options.data.range.timestamp;

        var date = new Date(1000 * range.min);

        while (date.getTime() / 1000 <= range.max) {
            if (date.getMonth() == 0) {
                var year = date.getFullYear();

                group.append('text')
                        .attr('x', options.x(date.getTime() / 1000))
                        .attr('y', options.textHeight / 2)
                        .attr('text-anchor', 'middle')
                        .text(year);
            }

            date.setMonth(date.getMonth() + 1);
        }
    };

    var createXHairlines = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight),
            range = options.data.range.timestamp;

        for (var timestamp = range.min; timestamp <= range.max; timestamp += range.step) {
            var date = new Date(1000 * timestamp);

            if (date.getUTCMonth() == 0) {
                var year = date.getUTCFullYear();

                group.append('rect')
                        .attr('x', options.x(timestamp))
                        .attr('y', 0)
                        .attr('height', options.yAxisAreaHeight)
                        .attr('class', 'x_hairline');
            }
        }
    };

    var createXAxis = function(options, chart) {
        createXMonths(options, chart);
        createXYears(options, chart);
    };

    var showXHightlight = function(options, node) {
        d3.select(node).attr('class', 'highlight_area');
    };

    var hideXHightlight = function(options, node) {
        d3.select(node).attr('class', 'highlight_area highlight_area__hidden');
    };

    var createAwards = function(options, chart, period) {
        var group = g(chart, options.yAxisAreaWidth, 0);

        group.append('image')
                .attr('x', options.x(period.timestamp) - 0.5 * options.awardSize)
                .attr('y', options.awardAreaHeight - 0.5 * options.awardSize)
                .attr('width', options.awardSize)
                .attr('height', options.awardSize)
                .attr('fill', '#ddd')
                .attr('xlink:href', '/static/svg/icon-35-medal.svg');
    };

    var getVolumeOffset = function(options, period) {
        return options.y(period.avgPace) - options.awardAreaHeight * period.distance / options.data.range.distance.max;
    };

    var createHighlightArea = function(options, chart, period) {
        var group = chart.append('g')
                .attr('class', 'highlight_area highlight_area__hidden')
                .on('mouseover', function() { showXHightlight(options, this); })
                .on("mouseout", function() { hideXHightlight(options, this); });

        group.append('rect')
                .attr('x', options.x(period.timestamp - 0.5 * options.data.range.timestamp.step))
                .attr('y', 0)
                .attr('width', options.x(period.timestamp + 0.5 * options.data.range.timestamp.step) - options.x(period.timestamp - 0.5 * options.data.range.timestamp.step))
                .attr('height', options.height);

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', getVolumeOffset(options, period) - 1.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .text(period.distance);

        // avg

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (1.5 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_label')
                .text('avg');

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (3.25 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_value')
                .text(formatPace(period.avgPace));

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.avgPace) + options.awardAreaHeight + (4.5 - 5.5) * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'avg_pace_label')
                .text('m / km');

        // min

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 1.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_label')
                .text('min');

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 3.25 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_value')
                .text(formatPace(period.minPace));

        group.append('text')
                .attr('x', options.x(period.timestamp))
                .attr('y', options.y(period.minPace) + options.awardAreaHeight + 4.5 * options.textHeight)
                .attr('text-anchor', 'middle')
                .attr('class', 'min_pace_label')
                .text('m / km');
    };

    var createVolumeArea = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var area = d3.svg.area()
                .x(function(period) { return options.x(period.timestamp); })
                .y0(function(period) { return options.y(period.avgPace); })
                .y1(function(period) { return getVolumeOffset(options, period); })
                .interpolate('monotone');

        var area2 = d3.svg.area()
                .x(function(period) { return options.x(period.timestamp); })
                .y0(function(period) { return options.y(period.avgPace); })
                .y1(function(period) { return options.y(period.avgPace); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', area2(period))
                    .attr('class', 'volume_area')
                    .style('opacity', 0)
                    .transition()
                    .style('opacity', 1)
                    .attr('d', area(period));
        });
    };

    var createAvgPaceCurve = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var line = d3.svg.line()
                .x(function(period) { return options.x(period.timestamp); })
                .y(function(period) { return options.y(period.avgPace); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', line(period))
                    .attr('class', 'avg_pace')
                    .attr('fill', 'none')
                    .style('opacity', 0)
                    .transition()
                    .style('opacity', 1);
        });
    };

    var createMinPaceCurve = function(options, chart) {
        var group = g(chart, 0, options.awardAreaHeight);

        var line = d3.svg.line()
                .x(function(period) { return options.x(period.timestamp); })
                .y(function(period) { return options.y(period.minPace); })
                .interpolate('monotone');

        var line2 = d3.svg.line()
                .x(function(period) { return options.x(period.timestamp); })
                .y(function(period) { return options.y(period.avgPace); })
                .interpolate('monotone');

        options.data.periods.forEach(function(period) {
            group.append('path')
                    .attr('d', line2(period))
                    .attr('class', 'min_pace')
                    .attr('fill', 'none')
                    .style('opacity', 0)
                    .transition()
                    .style('opacity', 1)
                    .attr('d', line(period));
        });
    };

    var createHighlightAreas = function(options, chart) {
        var group = g(chart, 0, 0),
            first = true;

        options.data.periods.forEach(function(period) {
            period.forEach(function(month) {
                if (first) {
                    first = false;
                    return;
                }

                createHighlightArea(options, group, month);

                if (month.awards) {
                    createAwards(options, chart, month);
                }
            });
        });
    };

    var createCurve = function(options, chart) {
        createVolumeArea(options, chart);
        createAvgPaceCurve(options, chart);
        createMinPaceCurve(options, chart);

        if (!options.simple) {
            createHighlightAreas(options, chart);
        }
    };

    var createChart = function(selector, data, options) {
        if (options == undefined) {
            options = {};
        }

        if (options.data == undefined) {
            options.data = data;
        }

        options.simple = options.simple || false;

        options.width = options.width || document.getElementById(selector).offsetWidth;
        options.height = options.height || 500;

        options.xAxisAreaHeightRatio = options.simple ? 0 : 0.15;
        options.xAxisAreaHeight = options.height * options.xAxisAreaHeightRatio;

        options.yAxisAreaWidthRatio = options.simple ? 0 : 0.10;
        options.yAxisAreaWidth = options.width * options.yAxisAreaWidthRatio;

        options.awardAreaHeightRatio = options.awardAreaHeightRatio || 0.2;
        options.awardAreaHeight = options.height * options.awardAreaHeightRatio;

        options.textHeight = options.textHeight || 13;
        options.awardSize = options.awardSize || 30;
        options.avgMonthSeconds = options.avgMonthSeconds || 60 * 60 * 24 * 30.5;

        options.xAxisAreaWidth = options.width - 0 * options.yAxisAreaWidth;
        options.yAxisAreaHeight = options.height - options.awardAreaHeight - options.xAxisAreaHeight;

        var chart = d3
                .select('.' + selector)
                .attr('width', options.width)
                .attr('height', options.height)
                .style('opacity', 1);

        options.x = d3.scale.linear()
                .range([ 0, options.width ])
                .domain([
                    options.data.range.timestamp.min,
                    options.data.range.timestamp.max + options.avgMonthSeconds / 2
                ]);

        options.y = d3.scale.linear()
                .range([ options.height - options.awardAreaHeight - options.xAxisAreaHeight, 0 ])
                .domain([ options.data.range.pace.min, options.data.range.pace.max ]);


        if (!options.simple) {
            createYHairlines(options, chart);
            createXHairlines(options, chart);
        }

        createCurve(options, chart);

        if (!options.simple) {
            createYAxes(options, chart);
            createXAxis(options, chart);
        }
    };

    var hideChart = function(selector) {
        var chart = d3
                .select('.' + selector)
                .transition()
                .style('opacity', 0)
                .selectAll('g')
                .remove();
    };

    var drawHourChart = function(selector) {
        var hourData = <%- JSON.stringify(@hours); %>;

        var width = 100,
                height = width,
                centerX = width / 2,
                centerY = height / 2,
                innerRadius = width / 4,
                outerRadius = width / 2,
                thickness = 1;

        var innerArc = d3.svg.arc()
                .innerRadius(innerRadius - thickness)
                .outerRadius(innerRadius)
                .startAngle(0)
                .endAngle(2 * Math.PI);

        var chart = d3
                .select('.' + selector)
                .attr('width', width)
                .attr('height', height)
                .append("g")
                .attr("transform", "translate(" + centerX + "," + centerY + ")");

        chart.append("path").attr("d", innerArc);

        var getOuterDot = function(d, i, max) {
            var radius = innerRadius + (outerRadius - innerRadius) * d[i] / max;
            var angle = 2 * Math.PI / d.length * i + Math.PI / d.length - Math.PI / 2;

            return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };
        };

        var line = d3.svg.line()
                .x(function(d) { return d.x; })
                .y(function(d) { return d.y; })
                .interpolate("basis-closed");


        var drawHourCurve = function(data, color) {
            var max = data.reduce(function(max, value) { return max > value ? max : value; }, Number.MIN_VALUE);
            var lineData = data.map(function(d, i) { return getOuterDot(data, i, max); });

            chart.append("path")
                    .attr("d", line(lineData))
                    .attr("stroke-width", 2)
                    .attr("stroke", color)
                    .attr("fill", "none");
        };

        drawHourCurve(hourData.allTime, "pink");
        drawHourCurve(hourData.recent, "red");
    };

    var drawDayChart = function(selector) {
        var dayData = <%- JSON.stringify(@days); %>;

        var width = 100,
                height = width,
                centerX = width / 2,
                centerY = height / 2,
                innerRadius = width / 4,
                outerRadius = width / 2,
                thickness = 1;

        var innerArc = d3.svg.arc()
                .innerRadius(innerRadius - thickness)
                .outerRadius(innerRadius)
                .startAngle(0)
                .endAngle(2 * Math.PI);

        var chart = d3
                .select('.' + selector)
                .attr('width', width)
                .attr('height', height)
                .append("g")
                .attr("transform", "translate(" + centerX + "," + centerY + ")");

        chart.append("path").attr("d", innerArc);

        var getOuterDot = function(d, i, max) {
            var radius = innerRadius + (outerRadius - innerRadius) * d[i] / max;
            var angle = 2 * Math.PI / d.length * i + Math.PI / d.length - Math.PI / 2;

            return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };
        };

        var line = d3.svg.line()
                .x(function(d) { return d.x; })
                .y(function(d) { return d.y; })
                .interpolate("basis-closed");


        var drawHourCurve = function(data, color) {
            var max = data.reduce(function(max, value) { return max > value ? max : value; }, Number.MIN_VALUE);
            var lineData = data.map(function(d, i) { return getOuterDot(data, i, max); });

            chart.append("path")
                    .attr("d", line(lineData))
                    .attr("stroke-width", 2)
                    .attr("stroke", color)
                    .attr("fill", "none");
        };

        drawHourCurve(dayData.allTime, "lightblue");
        drawHourCurve(dayData.recent, "blue");
    };

    (function() {
        var data = <%- JSON.stringify(@pace); %>;

        <% for @record in @records: %>
        if (data['<%= @record.id %>'] != undefined && data['<%= @record.id %>'].periods.length > 0) {
            createChart('pace_chart_<%= @record.id %>', data['<%= @record.id %>'], {
                width: 150,
                height: 75,
                simple: true
            });
        }
        <% end %>

        createChart('pace_chart', data.all);
        drawHourChart('hours_chart');
        drawDayChart('days_chart');

        window.switchChart = function(id) {
            hideChart('pace_chart');

            setTimeout(function() {
                createChart('pace_chart', data[id]);
            }, 500);
        };
    })();
</script>