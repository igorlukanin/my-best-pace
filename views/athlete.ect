<% extend 'layouts/default.ect' %>

<div class="pure-g pure-g-pad">
    <div class="pure-u-1-3">
        <div class="card-title">Athlete</div>
        <div class="card">
            <div class="pure-g pure-g-pad">
                <div class="pure-u-2-5">
                    <div class="avatar">
                        <img class='avatar-image' src="<%= @athlete.avatar_url %>"/>
                    </div>
                </div>
                <div class="pure-u-3-5">
                    <div class="name-block">
                        <div class="name"><%- @athlete.full_name.replace(' ', '<br/>') %></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="pure-u-1-3">
        <div class="card-title">Distances</div>
        <div class="card">2</div>
    </div>
    <div class="pure-u-1-3">
        <div class="card-title">Achievements</div>
        <div class="card">3</div>
    </div>
</div>

<br>

<div class="pure-g pure-g-pad">
    <div class="pure-u-1-1">
        <div class="content">
            <div class="card-title">Pace Progress</div>
            <div class="card">1</div>
        </div>
    </div>
</div>

<br><br><br><br><br><br>
<br><br><br><br><br><br>
<br><br><br><br><br><br>

Athlete:
<pre><%= JSON.stringify(@athlete, null, 2) %></pre>

Analytics:
<pre><%= JSON.stringify(@analytics, null, 2) %></pre>

<script>
//    var margin = {top: 20, right: 20, bottom: 30, left: 40},
//            width = 960 - margin.left - margin.right,
//            height = 500 - margin.top - margin.bottom;
//
//    /*
//     * value accessor - returns the value to encode for a given data object.
//     * scale - maps value to a visual display encoding, such as a pixel position.
//     * map function - maps from data value to display value
//     * axis - sets up axis
//     */
//
//    // setup x
//    var xValue = function(d) { return d.date;}, // data -> value
//            xScale = d3.scale.linear().range([0, width]), // value -> display
//            xMap = function(d) { return xScale(xValue(d));}, // data -> display
//            xAxis = d3.svg.axis().scale(xScale).orient("bottom");
//
//    // setup y
//    var yValue = function(d) { return d.pace_m_km;}, // data -> value
//            yScale = d3.scale.linear().range([height, 0]), // value -> display
//            yMap = function(d) { return yScale(yValue(d));}, // data -> display
//            yAxis = d3.svg.axis().scale(yScale).orient("left");
//
//    // setup fill color
//    var /*cValue = function(d) { return d.Manufacturer;},*/
//            color = d3.scale.category10();
//
//    // add the graph canvas to the body of the webpage
//    var svg = d3.select("body").append("svg")
//            .attr("width", width + margin.left + margin.right)
//            .attr("height", height + margin.top + margin.bottom)
//            .append("g")
//            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
//
//    // add the tooltip area to the webpage
//    var tooltip = d3.select("body").append("div")
//            .attr("class", "tooltip")
//            .style("opacity", 0);
//
//    // load data
//    d3.json("/athletes/<%= @athlete.id %>/activities.json", function(error, data) {
//        data = data.filter(function(activity) {
//            return activity.distance_group == '16k (10m)';
//        });
//
//        var distanceSum = 0, timeSum = 0;
//        data.forEach(function(activity) {
//            distanceSum += activity.distance_km;
//            timeSum += activity.time_m;
//        });
//        var avgPace = timeSum / distanceSum;
//        console.log(avgPace);
//
//        data = data.filter(function(activity) {
//            return Math.abs(activity.pace_m_km - avgPace) < (avgPace / 2);
//        });
//
//        data.sort(function(a, b) {
//            return Math.abs(a.f) - Math.abs(b.f);
//        });
//
//        console.log(data);
//
////        data = data.slice(1);
//
//        // don't want dots overlapping axis, so add in buffer to data domain
//        xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
//        yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);
//
//        // x-axis
//        svg.append("g")
//                .attr("class", "x axis")
//                .attr("transform", "translate(0," + height + ")")
//                .call(xAxis)
//                .append("text")
//                .attr("class", "label")
//                .attr("x", width)
//                .attr("y", -6)
//                .style("text-anchor", "end")
//                .text("Date");
//
//        // y-axis
//        svg.append("g")
//                .attr("class", "y axis")
//                .call(yAxis)
//                .append("text")
//                .attr("class", "label")
//                .attr("transform", "rotate(-90)")
//                .attr("y", 6)
//                .attr("dy", ".71em")
//                .style("text-anchor", "end")
//                .text("Pace, min/km");
//
//        // draw dots
//        svg.selectAll(".dot")
//                .data(data)
//                .enter().append("circle")
//                .attr("class", "dot")
//                .attr("r", 3.5)
//                .attr("cx", xMap)
//                .attr("cy", yMap)
////                .style("fill", function(d) { return color(cValue(d));})
//                .on("mouseover", function(d) {
//                    tooltip.transition()
//                            .duration(200)
//                            .style("opacity", .9);
//                    tooltip.html(d.id + "<br/> (" + xValue(d)
//                                    + ", " + yValue(d) + ")")
//                            .style("left", (d3.event.pageX + 5) + "px")
//                            .style("top", (d3.event.pageY - 28) + "px");
//                })
//                /*.on("mouseout", function(d) {
//                    tooltip.transition()
//                            .duration(500)
//                            .style("opacity", 0);
//                })*/;
//
//        // draw legend
//        var legend = svg.selectAll(".legend")
//                .data(color.domain())
//                .enter().append("g")
//                .attr("class", "legend")
//                .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
//
//        // draw legend colored rectangles
//        legend.append("rect")
//                .attr("x", width - 18)
//                .attr("width", 18)
//                .attr("height", 18)
//                .style("fill", color);
//
//        // draw legend text
//        legend.append("text")
//                .attr("x", width - 24)
//                .attr("y", 9)
//                .attr("dy", ".35em")
//                .style("text-anchor", "end")
//                .text(function(d) { return d;});
//
//
//
//
//
//        var dataR = data.map(function(activity) {
//            return [
//                activity.date,
//                activity.pace_m_km
//            ];
//        });
//
//
//        var result = regression('linear', dataR);
//
//        var reg_line = d3.svg.line()
//                .x(function(d, i) { return xScale(result.points[i][0]); })
//                .y(function(d, i) { return yScale(result.points[i][1]); });
//
//        svg.append('path')
//                .datum(dataR)
//                .attr('class','regression line')
//                .attr('d', reg_line)
//                .attr('stroke-width', 1)
//                .attr('stroke', 'black');

//    });
</script>